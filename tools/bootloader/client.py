#
# Generated by erpcgen 1.7.3 on Tue Mar 24 16:58:24 2020.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for Bootloader
class BootloaderClient(interface.IBootloader):
    def __init__(self, manager):
        super(BootloaderClient, self).__init__()
        self._clientManager = manager

    def bl_ping(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kSingleNormal,
                service=self.SERVICE_ID,
                request=self.BL_PING_ID,
                sequence=request.sequence,
                protocol=0))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    # TODO: It looks like this doesn't respect the max_length value - I'm surprised, I thought this would enforce it on the sender side...
    # TODO: Enforce max length
    # TODO: The generator code uses a 32-bit value for the list index regardless of the actual type of the variable (e.g. if you use a u8 as the length it still encodes a u32 in the Python)
    def bl_writePageBuffer(self, offset, data):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kSingleNormal,
                service=self.SERVICE_ID,
                request=self.BL_WRITEPAGEBUFFER_ID,
                sequence=request.sequence,
                protocol=0))
        # XXX: LOGAN: Insert padding to make this aligned
        # XXX: codec.write_uint8(0x00)

        # LOGAN: Manually packing by rearranging arguments
        if data is None:
            raise ValueError("data is None")
        codec.write_uint8(len(data))

        if offset is None:
            raise ValueError("offset is None")
        codec.write_uint16(offset)
        
        # Write list
        for _i0 in data:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int8()
        return _result

    def bl_erasePageBuffer(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kSingleNormal,
                service=self.SERVICE_ID,
                request=self.BL_ERASEPAGEBUFFER_ID,
                sequence=request.sequence,
                protocol=0))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def bl_eraseApp(self, app_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kSingleNormal,
                service=self.SERVICE_ID,
                request=self.BL_ERASEAPP_ID,
                sequence=request.sequence,
                protocol=0))
        if app_id is None:
            raise ValueError("app_id is None")
        # LOGAN: Manually resize enum to u8
        codec.write_uint8(app_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int8()
        return _result

    def bl_writePage(self, app_id, page_no, crc):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kSingleNormal,
                service=self.SERVICE_ID,
                request=self.BL_WRITEPAGE_ID,
                sequence=request.sequence,
                protocol=0))
        if app_id is None:
            raise ValueError("app_id is None")
        # XXX: LOGAN: Insert padding to make this aligned
        codec.write_uint8(app_id)

        # LOGAN: Reorder arguments for alignment
        if crc is None:
            raise ValueError("crc is None")
        codec.write_uint32(crc)

        if page_no is None:
            raise ValueError("page_no is None")
        codec.write_uint16(page_no)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int8()
        return _result

    def bl_setBootAction(self, action):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kSingleNormal,
                service=self.SERVICE_ID,
                request=self.BL_SETBOOTACTION_ID,
                sequence=request.sequence,
                protocol=0))
        if action is None:
            raise ValueError("action is None")
        # LOGAN: Manually resize enum to u8
        codec.write_uint8(action)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int8()
        return _result

    def bl_boot(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kSingleNormal,
                service=self.SERVICE_ID,
                request=self.BL_BOOT_ID,
                sequence=request.sequence,
                protocol=0))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int8()
        return _result

